blueprint:
  name: LD2450 Zone Creation
  description: >
    Create a zone for the LD2450 radar sensor (Apollo MTR-1/R-PRO-1) by collecting X/Y position data for a target over a set duration. Automatically sets single target mode, and provides a notification summary of the created zone.
  domain: automation
  input:
    zone_x1_entity:
      name: Zone X1 Entity
      description: Select the Zone X1 entity for the zone you want to set.
      selector:
        entity:
          domain: number
    duration:
      name: Collection Duration (seconds)
      description: How long to collect X/Y data for zone creation.
      default: 20
      selector:
        number:
          min: 5
          max: 300
          step: 5
    padding:
      name: Padding (mm)
      description: |
        Padding to add to the zone boundaries (in mm). There are approximately 304.8 mm in a foot.
      default: 150
      selector:
        number:
          min: 0
          max: 1000
          step: 10

mode: single

trigger:
  - platform: state
    entity_id: input_button.ld2450_zone_create
  - platform: event
    event_type: ld2450_zone_create
  # You can also trigger this automation manually from the Home Assistant UI:
  # 1. Go to Settings > Automations & Scenes > Automations.
  # 2. Find your automation created from this blueprint.
  # 3. Click the "Run" button to execute the actions immediately.
  - platform: homeassistant
    event: start  # This enables manual execution via the UI (the trigger will never actually fire, but allows manual runs).

variables:
  zone_x1_entity: !input zone_x1_entity
  device_base_name: "{{ zone_x1_entity.split('_zone_')[0].split('number.')[1] }}"
  zone: "{{ zone_x1_entity.split('_zone_')[1].split('_')[0] }}"
  x_entity: "sensor.{{ device_base_name }}_target_1_x"
  y_entity: "sensor.{{ device_base_name }}_target_1_y"
  zone_x1: "number.{{ device_base_name }}_zone_{{ zone }}_x1"
  zone_x2: "number.{{ device_base_name }}_zone_{{ zone }}_x2"
  zone_y1: "number.{{ device_base_name }}_zone_{{ zone }}_y1"
  zone_y2: "number.{{ device_base_name }}_zone_{{ zone }}_y2"
  multi_switch: "switch.{{ device_base_name }}_multi_target_tracking"
  duration: !input duration
  padding: !input padding

action:
  - alias: "Store current multi-target state and switch to single target mode (if switch exists)"
    choose:
      - conditions:
          - condition: template
            value_template: "{{ states(multi_switch) is not none }}"
        sequence:
          - variables:
              prev_multi_state: "{{ states(multi_switch) }}"
          - service: switch.turn_off
            target:
              entity_id: "{{ multi_switch }}"
  - alias: "Detect units and convert all values to mm for calculation"
    variables:
      x_uom: "{{ state_attr(x_entity, 'unit_of_measurement') or 'mm' }}"
      y_uom: "{{ state_attr(y_entity, 'unit_of_measurement') or 'mm' }}"
      zone_x1_uom: "{{ state_attr(zone_x1, 'unit_of_measurement') or 'mm' }}"
      zone_x2_uom: "{{ state_attr(zone_x2, 'unit_of_measurement') or 'mm' }}"
      zone_y1_uom: "{{ state_attr(zone_y1, 'unit_of_measurement') or 'mm' }}"
      zone_y2_uom: "{{ state_attr(zone_y2, 'unit_of_measurement') or 'mm' }}"
      uom_to_mm: {
        'mm': 1,
        'cm': 10,
        'm': 1000,
        'in': 25.4,
        'ft': 304.8,
        'yd': 914.4
      }
  - alias: "Initialize data collection"
    variables:
      x_mm_values: []
      y_mm_values: []
      start_time: "{{ now().timestamp() }}"
  - alias: "Collect X/Y data for duration (convert to mm)"
    repeat:
      while:
        - condition: template
          value_template: "{{ (now().timestamp() - start_time) < duration }}"
      sequence:
        - variables:
            x_raw: "{{ states(x_entity) | float(0) }}"
            y_raw: "{{ states(y_entity) | float(0) }}"
            x_mm: "{{ x_raw * uom_to_mm[x_uom] }}"
            y_mm: "{{ y_raw * uom_to_mm[y_uom] }}"
        - if:
            - condition: template
              value_template: "{{ x_mm is number and y_mm is number and not (x_mm == 0 and y_mm == 0) }}"
          then:
            - variables:
                x_mm_values: "{{ x_mm_values + [x_mm] }}"
                y_mm_values: "{{ y_mm_values + [y_mm] }}"
        - delay: 1
  - alias: "Calculate min/max and apply padding (in mm)"
    variables:
      min_x_mm: "{{ (x_mm_values | length > 0 and (x_mm_values | min) or 0) - padding }}"
      max_x_mm: "{{ (x_mm_values | length > 0 and (x_mm_values | max) or 0) + padding }}"
      min_y_mm: "{{ (y_mm_values | length > 0 and (y_mm_values | min) or 0) - padding }}"
      max_y_mm: "{{ (y_mm_values | length > 0 and (y_mm_values | max) or 0) + padding }}"
  - alias: "Clamp values to valid range (mm)"
    variables:
      min_x_mm: "{{ (min_x_mm | float(-4860)) if (min_x_mm | float(-4860)) > -4860 else -4860 if (min_x_mm | float(-4860)) < -4860 else min_x_mm }}"
      max_x_mm: "{{ (max_x_mm | float(4860)) if (max_x_mm | float(4860)) < 4860 else 4860 if (max_x_mm | float(4860)) > 4860 else max_x_mm }}"
      min_y_mm: "{{ (min_y_mm | float(0)) if (min_y_mm | float(0)) > 0 else 0 if (min_y_mm | float(0)) < 0 else min_y_mm }}"
      max_y_mm: "{{ (max_y_mm | float(7560)) if (max_y_mm | float(7560)) < 7560 else 7560 if (max_y_mm | float(7560)) > 7560 else max_y_mm }}"
  - alias: "Convert results from mm to each zone entity's uom"
    variables:
      min_x_conv: "{{ min_x_mm / uom_to_mm[zone_x1_uom] }}"
      max_x_conv: "{{ max_x_mm / uom_to_mm[zone_x2_uom] }}"
      min_y_conv: "{{ min_y_mm / uom_to_mm[zone_y1_uom] }}"
      max_y_conv: "{{ max_y_mm / uom_to_mm[zone_y2_uom] }}"
  - alias: "Set zone coordinates if data was collected"
    choose:
      - conditions:
          - condition: template
            value_template: "{{ x_mm_values | length > 0 and y_mm_values | length > 0 }}"
        sequence:
          - service: number.set_value
            data:
              entity_id: "{{ zone_x1 }}"
              value: "{{ min_x_conv }}"
          - service: number.set_value
            data:
              entity_id: "{{ zone_x2 }}"
              value: "{{ max_x_conv }}"
          - service: number.set_value
            data:
              entity_id: "{{ zone_y1 }}"
              value: "{{ min_y_conv }}"
          - service: number.set_value
            data:
              entity_id: "{{ zone_y2 }}"
              value: "{{ max_y_conv }}"
  - alias: "Restore previous multi-target state (if switch exists)"
    choose:
      - conditions:
          - condition: template
            value_template: "{{ states(multi_switch) is not none }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: "{{ multi_switch }}"
  - alias: "Send summary notification"
    choose:
      - conditions:
          - condition: template
            value_template: "{{ x_mm_values | length > 0 and y_mm_values | length > 0 }}"
        sequence:
          - service: persistent_notification.create
            data:
              title: "LD2450 Zone Created/Updated"
              message: |
                Created Zone {{ zone }}
                X1: {{ min_x_conv | round(1) }} {{ zone_x1_uom }}
                X2: {{ max_x_conv | round(1) }} {{ zone_x2_uom }}
                Y1: {{ min_y_conv | round(1) }} {{ zone_y1_uom }}
                Y2: {{ max_y_conv | round(1) }} {{ zone_y2_uom }}
                Padding: {{ padding }} mm
                Duration: {{ duration }} seconds
      - conditions:
          - condition: template
            value_template: "{{ x_mm_values | length == 0 or y_mm_values | length == 0 }}"
        sequence:
          - service: persistent_notification.create
            data:
              title: "LD2450 Zone Not Created/Updated"
              message: |
                No valid data was collected. Zone {{ zone }} was not created or updated.
